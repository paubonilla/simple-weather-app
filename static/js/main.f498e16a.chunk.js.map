{"version":3,"sources":["components/Search.js","components/Weather.js","styled/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchBoxContainer","styled","div","SearchBox","wQuery","setWQuery","searchWeather","type","className","placeholder","onChange","e","target","value","onKeyPress","WeatherContainer","Weather","weather","Math","round","main","temp","description","Container","Inner","Content","LocationBox","Location","DateStyle","api","App","useState","setWeather","Search","key","fetch","then","response","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","_date","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"y1BAGO,IAAMA,EAAqBC,IAAOC,IAAV,KA0ChBC,EAhBG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,cACtC,OACE,6BACE,kBAACN,EAAD,KACE,2BACEO,KAAK,OACLC,UAAU,aACVC,YAAY,kBACZC,SAAU,SAAAC,GAAC,OAAIN,EAAUM,EAAEC,OAAOC,QAClCA,MAAOT,EACPU,WAAYR,O,wsBCpCf,IAAMS,EAAmBd,IAAOC,IAAV,KA8Cdc,EAZC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjB,OACE,kBAACF,EAAD,KACE,yBAAKP,UAAU,QACZU,KAAKC,MAAMF,EAAQG,KAAKC,MAD3B,SAGA,yBAAKb,UAAU,WAAWS,EAAQA,QAAQ,GAAGG,MAC7C,yBAAKZ,UAAU,eAAeS,EAAQA,QAAQ,GAAGK,e,okCC1ChD,IAAMC,EAAYtB,IAAOC,IAAV,KAKTsB,EAAQvB,IAAOC,IAAV,KAMLuB,EAAUxB,IAAOC,IAAV,KAcPwB,EAAczB,IAAOC,IAAV,KAKXyB,EAAW1B,IAAOC,IAAV,KAQR0B,EAAY3B,IAAOC,IAAV,KClChB2B,EACC,mCADDA,EAEE,2CA0DOC,MAvDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACN3B,EADM,KACEC,EADF,OAEiB0B,mBAAS,IAF1B,mBAENd,EAFM,KAEGe,EAFH,KA4Bb,OACE,kBAACT,EAAD,KACE,kBAACC,EAAD,KACE,yBAAKhB,UAAmC,oBAAhBS,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,OACvG,kBAACI,EAAD,KACE,kBAACQ,EAAD,CACE5B,UAAWA,EACXC,cA/BU,SAAAK,GACN,UAAVA,EAAEuB,KACJC,MAAM,GAAD,OAAIN,EAAJ,qBAAyBzB,EAAzB,+BAAsDyB,IACxDO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,EAAWO,GACXlC,EAAU,IACVmC,QAAQC,IAAIxB,SA0Be,oBAAhBA,EAAQG,KACf,oCACE,kBAACM,EAAD,KACE,kBAACC,EAAD,KAAWV,EAAQyB,KAAnB,KAA2BzB,EAAQ0B,IAAIC,SACvC,kBAAChB,EAAD,KAzBF,SAACiB,GACb,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAgBRE,CAAM,IAAIC,QAExB,kBAAC,EAAD,CACEtC,QAASA,KAGV,QC9CGuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.f498e16a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nexport const SearchBoxContainer = styled.div`\n  width: 100%;\n  margin: 0 0 75px;\n  .search-bar {\n    display: block;\n    width: 100%;\n    padding: 15px;\n    appearance: none;\n    background: none;\n    border: none;\n    outline: none;\n    background-color: rgba(255, 255, 255, 0.5);\n    border-radius: 5px;\n    box-shadow: 0px 5px rgba(0, 0, 0, 0.2);\n    color: #333436;\n    font-size: 20px;\n    transition: 0.4s ease;\n    &::placeholder {\n      color: #404040;\n    }\n    &:focus {\n      background-color: rgba(255, 255, 255, 0.75);\n    }\n  }\n`\n\nconst SearchBox = ({ wQuery, setWQuery, searchWeather }) => {\n  return (\n    <div>\n      <SearchBoxContainer>\n        <input\n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search location\"\n          onChange={e => setWQuery(e.target.value)}\n          value={wQuery}\n          onKeyPress={searchWeather}\n        />\n      </SearchBoxContainer>\n    </div>\n  )\n}\nexport default SearchBox","import React from 'react'\nimport styled from 'styled-components'\n\nexport const WeatherContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px;\n\n  > .temp {\n    display: flex;\n    background-color: rgba(255,255,255,0.2);\n    border-radius: 16px;\n    padding: 15px 25px;\n    color: #e8e8e8;\n    font-size: 90px;\n    font-weight: 900;\n    text-shadow: 3px 6px rgba(50,50,70,0.5);\n    box-shadow: 3px 6px rgba(0,0,0,0.2);\n  }\n\n  > .weather {\n    height: 35px;\n    display: flex;\n    align-items: center;\n    font-size: 55px;\n    padding: 40px;\n    color: #e8e8e8;\n  }\n\n  > .weatherDesc {\n    color: #e8e8e8;\n    font-family: 'Noto Serif JP', serif;\n    font-size: 14px;\n  }\n`\n\nconst Weather = ({ weather }) => {\n  return (\n    <WeatherContainer>\n      <div className=\"temp\">\n        {Math.round(weather.main.temp)}Â°C\n        </div>\n      <div className=\"weather\">{weather.weather[0].main}</div>\n      <div className=\"weatherDesc\">{weather.weather[0].description}</div>\n    </WeatherContainer>\n  )\n}\n\nexport default Weather","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`\n\nexport const Inner = styled.div`\n  width: 100%;\n  max-width: 400px;\n  margin: 0 auto;\n`\n\nexport const Content = styled.div`\n  min-height: 100vh;\n  background-image: linear-gradient(\n    to bottom,\n    rgba(0, 0, 0, 0.2),\n    rgba(0, 0, 0, 0.75)\n  );\n  padding: 25px;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n`\n\nexport const LocationBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Location = styled.div`\n  color: #e8e8e8;\n  font-size: 32px;\n  font-weight: 500;\n  text-align: center;\n  text-shadow: 3px 3px rgba(50, 50, 70, 0.5);\n`\n\nexport const DateStyle = styled.div`\n  color: #e8e8e8;\n  font-size: 20px;\n  font-weight: 300;\n  font-family: 'Noto Serif JP', serif;\n  text-shadow: 2px 2px rgba(50, 50, 70, 0.5);\n`","import React, { useState } from 'react'\nimport SearchBox from './components/Search'\nimport Weather from './components/Weather'\nimport './App.css';\nimport { Container, Inner, Content, LocationBox, Location, DateStyle } from './styled'\n\nconst api = {\n  key: \"bed571fdc012c392cd875b56d2aa18ad\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [wQuery, setWQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n  const searchWeather = e => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${wQuery}&units=metric&APPID=${api.key}`)\n        .then(response => response.json()) // get the json from response // json promise // which is gonna pass it into a another promise that is === result\n        .then(result => {\n          setWeather(result) // and set Weather === result\n          setWQuery('')\n          console.log(weather)\n        })\n    }\n  }\n\n  const _date = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <Container>\n      <Inner>\n        <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n          <Content>\n            <SearchBox\n              setWQuery={setWQuery}\n              searchWeather={searchWeather}\n            />\n            {(typeof weather.main != \"undefined\") ? (\n              <>\n                <LocationBox>\n                  <Location>{weather.name}, {weather.sys.country}</Location>\n                  <DateStyle>{_date(new Date())}</DateStyle>\n                </LocationBox>\n                <Weather\n                  weather={weather}\n                />\n              </>\n            ) : ('')}\n          </Content>\n        </div>\n      </Inner>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}